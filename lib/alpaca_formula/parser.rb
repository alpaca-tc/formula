# frozen_string_literal: true

#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'alpaca_formula/parser_extras'
module AlpacaFormula
  class Parser < Racc::Parser
    ##### State transition tables begin ###

    racc_action_table = [
      14, 15, 16,    17, 18,    21, 38,    15, 16, 17,
      18, 7, 17, 18, 10,    11, 12,    13, 7, 31,
      6, 10, 11, 12, 13, 7, 20, 6, 10, 11,
      12, 13, 7, 23, 6, 10, 11, 12, 13, 7,
      22, 6, 10, 11, 12, 13, 7, nil, 6, 10,
      11, 12,    13, 7, nil, 6, 10, 11, 12, 13,
      7, nil, 6,    10,    11,    12, 13,     7, nil, 6,
      10,    11,    12,    13, 7, nil, 6, 10, 11, 12,
      13,    36, nil, 6, nil, 15, 16, 17, 18, 33,
      17,    18, 15, 16, 17, 18, 15, 16, 17, 18,
      nil, 28, 15, 16, 17, 18
    ]

    racc_action_check = [
      1, 37,    37, 37, 37, 12, 37, 1, 1, 1,
      1,     6, 25, 25, 6, 6, 6, 6, 0, 29,
      6,     0,     0, 0, 0, 36, 7, 0, 36, 36,
      36,    36,    20,    14,    36,    20,    20, 20, 20, 18,
      13,    20,    18,    18,    18,    18,    31, nil,    18, 31,
      31,    31,    31,    32, nil, 31, 32, 32, 32, 32,
      15, nil, 32, 15, 15, 15, 15, 16, nil, 15,
      16,    16, 16, 16, 17, nil, 16, 17, 17, 17,
      17,    34, nil, 17, nil, 34, 34, 34, 34, 30,
      24,    24, 30, 30, 30, 30, 19, 19, 19, 19,
      nil, 19, 35, 35, 35, 35
    ]

    racc_action_pointer = [
      16, 0,   nil, nil, nil, nil, 9, 15, nil, nil,
      nil, nil, -1, 34, 33, 58, 65, 72, 37, 89,
      30, nil, nil, nil, 81, 3, nil, nil, nil, 16,
      85, 44, 51, nil, 78, 95, 23, -6, nil
    ]

    racc_action_default = [
      -1, -28, -2, -3, -4, -5, -1, -28, -20, -21,
      -23, -25, -28,   -28, -28, -1, -1, -1, -1, -28,
      -1, -26, -27,    39, -15, -16, -17, -18, -7, -28,
      -12, -1, -1, -13, -28, -11, -1, -28, -9
    ]

    racc_goto_table = [
      1, 29, 32,   nil, nil, nil, 19, nil, nil, nil,
      nil, nil, nil, nil, nil, 24, 25, 26, 27, nil,
      30, nil, nil, nil, nil, nil, nil, nil, nil, nil,
      nil, 34, 35, nil, nil, nil, 37
    ]

    racc_goto_check = [
      1, 6, 7, nil, nil, nil, 1, nil, nil, nil,
      nil, nil, nil, nil, nil, 1,     1, 1, 1, nil,
      1, nil,   nil, nil, nil, nil, nil, nil, nil, nil,
      nil, 1, 1, nil, nil, nil, 1
    ]

    racc_goto_pointer = [
      nil, 0, nil, nil, nil, nil, -19, -28, nil, nil
    ]

    racc_goto_default = [
      nil, nil, 2, 3, 4, 5, nil, nil, 8, 9
    ]

    racc_reduce_table = [
      0, 0, :racc_error,
      0, 14, :_reduce_none,
      1, 14, :_reduce_none,
      1, 14, :_reduce_none,
      1, 14, :_reduce_none,
      1, 14, :_reduce_none,
      0, 16, :_reduce_none,
      3, 16, :_reduce_7,
      0, 18, :_reduce_none,
      8, 18, :_reduce_9,
      0, 19, :_reduce_none,
      3, 19, :_reduce_11,
      0, 20, :_reduce_none,
      1, 20, :_reduce_13,
      0, 17, :_reduce_none,
      3, 17, :_reduce_15,
      3, 17, :_reduce_16,
      3, 17, :_reduce_17,
      3, 17, :_reduce_18,
      0, 15, :_reduce_none,
      1, 15, :_reduce_none,
      1, 15, :_reduce_none,
      0, 21, :_reduce_none,
      1, 21, :_reduce_23,
      0, 22, :_reduce_none,
      1, 22, :_reduce_25,
      2, 22, :_reduce_26,
      2, 22, :_reduce_27
    ]

    racc_reduce_n = 28

    racc_shift_n = 39

    racc_token_table = {
      false => 0,
      :error => 1,
      :IF => 2,
      :DELIMITER => 3,
      :COMPARISON_OPERATOR => 4,
      :ITEM => 5,
      :DIGIT => 6,
      :PLUS_OPERATOR => 7,
      :MINUS_OPERATOR => 8,
      :DEVISION_OPERATOR => 9,
      :MULTIPLICATION_OPERATOR => 10,
      :LPAREN => 11,
      :RPAREN => 12
    }

    racc_nt_base = 13

    racc_use_result_var = false

    Racc_arg = [
      racc_action_table,
      racc_action_check,
      racc_action_default,
      racc_action_pointer,
      racc_goto_table,
      racc_goto_check,
      racc_goto_default,
      racc_goto_pointer,
      racc_nt_base,
      racc_reduce_table,
      racc_token_table,
      racc_shift_n,
      racc_reduce_n,
      racc_use_result_var
    ].freeze

    Racc_token_to_s_table = [
      '$end',
      'error',
      'IF',
      'DELIMITER',
      'COMPARISON_OPERATOR',
      'ITEM',
      'DIGIT',
      'PLUS_OPERATOR',
      'MINUS_OPERATOR',
      'DEVISION_OPERATOR',
      'MULTIPLICATION_OPERATOR',
      'LPAREN',
      'RPAREN',
      '$start',
      'expression',
      'terminal',
      'group',
      'calculation',
      'if_statement',
      'condition',
      'compensation_operator',
      'item',
      'digit'
    ].freeze

    Racc_debug_parser = false

    ##### State transition tables end #####

    # reduce 0 omitted

    # reduce 1 omitted

    # reduce 2 omitted

    # reduce 3 omitted

    # reduce 4 omitted

    # reduce 5 omitted

    # reduce 6 omitted

    def _reduce_7(val, _values)
      Nodes::Group.new(val[1])
    end

    # reduce 8 omitted

    def _reduce_9(val, _values)
      Nodes::If.new(val[2], val[4], val[6])
    end

    # reduce 10 omitted

    def _reduce_11(val, _values)
      Nodes::Condition.new(val[1], val[0], val[2])
    end

    # reduce 12 omitted

    def _reduce_13(val, _values)
      Nodes::ComparisonOperator.new(val.first)
    end

    # reduce 14 omitted

    def _reduce_15(val, _values)
      Nodes::PlusOperation.new(val[0], val[2])
    end

    def _reduce_16(val, _values)
      Nodes::MinusOperation.new(val[0], val[2])
    end

    def _reduce_17(val, _values)
      Nodes::DevisionOperation.new(val[0], val[2])
    end

    def _reduce_18(val, _values)
      Nodes::MultiplicationOperation.new(val[0], val[2])
    end

    # reduce 19 omitted

    # reduce 20 omitted

    # reduce 21 omitted

    # reduce 22 omitted

    def _reduce_23(val, _values)
      Nodes::Item.new(val.first)
    end

    # reduce 24 omitted

    def _reduce_25(val, _values)
      Nodes::Digit.new(val.first)
    end

    def _reduce_26(val, _values)
      Nodes::Digit.new(val.last)
    end

    def _reduce_27(val, _values)
      Nodes::Digit.new("-#{val.last}")
    end

    def _reduce_none(val, _values)
      val[0]
    end
  end   # class Parser
  end   # module AlpacaFormula
